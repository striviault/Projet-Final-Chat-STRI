/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat;

import java.sql.*;
import java.text.*;
/**
 *
 * @author Julien
 */
public class ChatGUI extends javax.swing.JFrame {

    /**
     * Creates new form ChatGUI
     */
    public ChatGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PMswitchButton = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jBddAdress = new javax.swing.JFormattedTextField();
        jBddPort = new javax.swing.JFormattedTextField();
        jBddUser = new javax.swing.JFormattedTextField();
        jButtonConnexionBDD = new javax.swing.JButton();
        jChatUser = new javax.swing.JFormattedTextField();
        jChatPassword = new javax.swing.JFormattedTextField();
        jButtonLogin = new javax.swing.JButton();
        jSPaneRoomusers1 = new javax.swing.JScrollPane();
        jRooms = new javax.swing.JTextArea();
        jSPaneRoomusers = new javax.swing.JScrollPane();
        jUsers = new javax.swing.JTextArea();
        jButtonEnvoyer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jConsole = new javax.swing.JTextArea();
        jBddPassword = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jChatContent = new javax.swing.JTextArea();
        jStatus = new javax.swing.JFormattedTextField();
        jButtonStatut = new javax.swing.JButton();
        jRadioPM = new javax.swing.JRadioButton();
        jRadioSalon = new javax.swing.JRadioButton();
        jSelector = new javax.swing.JSpinner();
        jButtonCharger = new javax.swing.JButton();
        jRoomName = new javax.swing.JFormattedTextField();
        jButtonRoomCreate = new javax.swing.JButton();
        jSelectRoom = new javax.swing.JSpinner();
        jSelectUser = new javax.swing.JSpinner();
        jButtonTokenCreate = new javax.swing.JButton();
        jButtonInscription = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jMessage = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonGuest = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jButtonWriter = new javax.swing.JRadioButton();
        jButtonKicked = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jBddAdress.setText("localhost");
        jBddAdress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBddAdressActionPerformed(evt);
            }
        });

        jBddPort.setText("5432");
        jBddPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBddPortActionPerformed(evt);
            }
        });

        jBddUser.setText("postgres");

        jButtonConnexionBDD.setText("Test Connexion BDD");
        jButtonConnexionBDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnexionBDDActionPerformed(evt);
            }
        });

        jChatUser.setText("Utilisateur");
        jChatUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChatUserActionPerformed(evt);
            }
        });

        jChatPassword.setText("Password");

        jButtonLogin.setText("Connexion");
        jButtonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoginActionPerformed(evt);
            }
        });

        jRooms.setColumns(20);
        jRooms.setRows(5);
        jSPaneRoomusers1.setViewportView(jRooms);

        jUsers.setColumns(20);
        jUsers.setRows(5);
        jSPaneRoomusers.setViewportView(jUsers);

        jButtonEnvoyer.setText("Envoyer");
        jButtonEnvoyer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnvoyerActionPerformed(evt);
            }
        });

        jConsole.setEditable(false);
        jConsole.setBackground(new java.awt.Color(235, 235, 235));
        jConsole.setColumns(20);
        jConsole.setRows(1);
        jScrollPane1.setViewportView(jConsole);

        jBddPassword.setText("passroot");

        jChatContent.setColumns(20);
        jChatContent.setRows(5);
        jScrollPane2.setViewportView(jChatContent);

        jStatus.setText("En ligne");

        jButtonStatut.setText("Changer de statut");
        jButtonStatut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStatutActionPerformed(evt);
            }
        });

        PMswitchButton.add(jRadioPM);
        jRadioPM.setText("Message privé");

        PMswitchButton.add(jRadioSalon);
        jRadioSalon.setSelected(true);
        jRadioSalon.setText("Message salon");
        jRadioSalon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioSalonActionPerformed(evt);
            }
        });

        jButtonCharger.setText("Charger/Rafraichir");
        jButtonCharger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChargerActionPerformed(evt);
            }
        });

        jRoomName.setText("Nom du salon");

        jButtonRoomCreate.setText("Nouveau Salon");
        jButtonRoomCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRoomCreateActionPerformed(evt);
            }
        });

        jButtonTokenCreate.setText("Changer permission");
        jButtonTokenCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTokenCreateActionPerformed(evt);
            }
        });

        jButtonInscription.setText("Inscription");
        jButtonInscription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInscriptionActionPerformed(evt);
            }
        });

        jMessage.setColumns(20);
        jMessage.setRows(5);
        jMessage.setText("Bienvenue sur STRI Chat!\nVous pouvez envoyer un message privé à un contact\nou dans un salon en sélectionnant son id ici ->\n");
        jMessage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMessageMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMessageMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jMessage);

        jLabel1.setText("ID Salon");

        jLabel2.setText("ID Contact");

        buttonGroup1.add(jButtonGuest);
        jButtonGuest.setText("Invité");

        jLabel3.setText("ID Salon/Contact");

        buttonGroup1.add(jButtonWriter);
        jButtonWriter.setText("Rédacteur");

        buttonGroup1.add(jButtonKicked);
        jButtonKicked.setText("Exclu");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jRadioPM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSelector, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3))
                            .addComponent(jRadioSalon)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBddAdress, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBddPort, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBddPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonConnexionBDD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jChatUser, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSPaneRoomusers1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRoomName, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonRoomCreate))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonEnvoyer, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonStatut, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSPaneRoomusers)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jChatPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLogin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonInscription)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonCharger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jSelectRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jSelectUser, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(22, 22, 22)
                                        .addComponent(jLabel2))))
                            .addComponent(jButtonTokenCreate, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButtonWriter, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonGuest, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonKicked, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jStatus)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBddAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBddPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBddUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonConnexionBDD)
                    .addComponent(jBddPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLogin)
                    .addComponent(jChatPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jChatUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonInscription))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSPaneRoomusers1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSPaneRoomusers, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRoomName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonRoomCreate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jSelectRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSelectUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButtonTokenCreate)
                                                .addGap(11, 11, 11)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jButtonCharger, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jRadioSalon)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(jRadioPM)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(13, 13, 13)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jButtonEnvoyer, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jButtonStatut)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(41, 41, 41))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonGuest)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonWriter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonKicked)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBddAdressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBddAdressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBddAdressActionPerformed

    private void jBddPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBddPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBddPortActionPerformed

    private void jButtonConnexionBDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnexionBDDActionPerformed
        // TODO add your handling code here:
        try
        {
            Class.forName("org.postgresql.Driver");
            Connection con=DriverManager.getConnection("jdbc:postgresql://" +jBddAdress.getText()+ ":" +jBddPort.getText()+ "/postgres", ""+jBddUser.getText()+"", ""+jBddPassword.getText()+"");
            if(con!=null)
                jConsole.setText("Connexion établie avec la BDD");
            else
                jConsole.setText("Connexion avec la BDD impossible");
        }
        catch(Exception ee )
        {
            ee.printStackTrace();
        }
        
    }//GEN-LAST:event_jButtonConnexionBDDActionPerformed

    private void jButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginActionPerformed
        try
        {
            jChatContent.setText("");
            int UserId=0;
            String ChatUser = jChatUser.getText();
            String ChatPassword = jChatPassword.getText();
            Class.forName("org.postgresql.Driver");
            Connection con=DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "passroot");
            Statement state = con.createStatement();
            ResultSet result = state.executeQuery("SELECT * FROM \"User\" WHERE name = '" + ChatUser + "' AND password = '" + ChatPassword + "'");            
            int count = 0;
            while(result.next()){
                count = count+1;
                UserId = result.getInt("id");
            }
            if (count==1){
                jConsole.setText("Authentification réussie: id="+UserId);            
                Statement stlog = con.createStatement();
                int reslog = stlog.executeUpdate("UPDATE \"User\" SET status = 'En ligne' WHERE name = '" + ChatUser + "' AND password = '" + ChatPassword + "'");            
            
        // Récupération des salons
                Statement state2 = con.createStatement();
                ResultSet result2 = state2.executeQuery("SELECT * FROM \"Room\" AS r, \"Token\" AS t WHERE r.id = t.room AND target = "+UserId);           
                String RoomName;
                String RoomRights;
                int RoomId;
                jRooms.setText("");
                while(result2.next()){
                    
                    RoomId = result2.getInt("id");
                    RoomName = result2.getString("name");
                    RoomRights = result2.getString("type");
                    count = count+1;
                    jRooms.append("Salon "+RoomId+": "+RoomName+" ["+RoomRights+"]\n");
                }
                // Récupération des contacts
                Statement state3 = con.createStatement();
                ResultSet result3 = state3.executeQuery("SELECT DISTINCT id, name, status FROM \"User\" ORDER BY id");           
                String CorespName;
                String CorespStatus;
                int CorespId;
                jUsers.setText("");
                while(result3.next()){
                    CorespId = result3.getInt("id");
                    CorespName = result3.getString("name");
                    CorespStatus = result3.getString("status");
                    count = count+1;
                    jUsers.append("Contact "+CorespId+": "+CorespName+"["+CorespStatus+"]\n");
                }
                
            }
            
            else if (count>1){
                jConsole.setText("Utilisateur dupliqué. Accès refusé");            
            }
            else {
                jConsole.setText("Combinaison incorrecte. Accès refusé");            
            }
            
        }
        catch(Exception ee )
        {
            ee.printStackTrace();
        }
       
        
   
    }//GEN-LAST:event_jButtonLoginActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
            
    }//GEN-LAST:event_formWindowClosed

    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try{
                Class.forName("org.postgresql.Driver");
                Connection con=DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "passroot");
                Statement stlog = con.createStatement();
                String ChatUser = jChatUser.getText();
                String ChatPassword = jChatPassword.getText();
                int reslog = stlog.executeUpdate("UPDATE \"User\" SET status = 'Déconnecté' WHERE name = '" + ChatUser + "' AND password = '" + ChatPassword + "'");            
            }
            catch(Exception ee )
            {
                ee.printStackTrace();
            }
    }//GEN-LAST:event_formWindowClosing

    private void jChatUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChatUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jChatUserActionPerformed

    private void jButtonChargerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChargerActionPerformed
        // TODO add your handling code here:
        try
        {
            int UserId=0;
            String ChatUser = jChatUser.getText();
            String ChatPassword = jChatPassword.getText();
            Class.forName("org.postgresql.Driver");
            Connection con=DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "passroot");
            Statement state = con.createStatement();
            ResultSet result = state.executeQuery("SELECT * FROM \"User\" WHERE name = '" + ChatUser + "' AND password = '" + ChatPassword + "'");            
            int count = 0;
            while(result.next()){
                count = count+1;
                UserId = result.getInt("id");
            }
            if (count==1){
                jConsole.setText("Authentification réussie: id="+UserId);
                int TargetId = (Integer)jSelector.getValue();
                boolean pm = jRadioPM.isSelected();
                String S="";
                if (pm==true){
                    String CorespName= "";
                    String CorespStatus= "";
                    Statement stname = con.createStatement();
                    ResultSet resname = stname.executeQuery("SELECT name, status FROM \"User\" WHERE id= "+TargetId);
                    while (resname.next()){
                        CorespName = resname.getString("name");
                        CorespStatus = resname.getString("status");
                        jConsole.setText("Conversation privée:"+CorespName);
                    }
                    Statement stloadpm = con.createStatement();
                    ResultSet resloadpm = stloadpm.executeQuery("SELECT m.id, name, content, sender, recipient, time FROM \"Message\" AS m, \"User\" as u WHERE sender = u.id AND ((sender = '"+TargetId+"' AND recipient = '"+UserId+"') OR (sender = '"+UserId+"' AND recipient = '"+TargetId+"')) ORDER BY m.id ASC");
                    jChatContent.setText("");
                    while(resloadpm.next()){
                        S = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(resloadpm.getTimestamp("time"));
                        resname = stname.executeQuery("SELECT name, status FROM \"User\" WHERE id= "+resloadpm.getString("sender"));
                        if (resname.next()){
                            CorespName = resname.getString("name");
                            CorespStatus = resname.getString("status");
                    }
                        jChatContent.append("["+S+"]"+CorespName+"("+CorespStatus+"):"+resloadpm.getString("content")+"\n");
                    }
                }
                else{
                    String RoomName= "";
                    
                    Statement stchk = con.createStatement();
                    ResultSet reschk = stchk.executeQuery("SELECT * FROM \"Room\" AS r, \"Token\" AS t WHERE r.id = t.room AND type != 'Exclu' AND target = '"+UserId+"' AND t.room = '"+TargetId+"'");
                    if (reschk.next()){
                    
                        Statement stname = con.createStatement();
                        ResultSet resname = stname.executeQuery("SELECT name FROM \"Room\" WHERE id= "+TargetId);
                        while (resname.next()){
                            RoomName = resname.getString("name");
                            jConsole.setText("Salon actuel:"+RoomName);
                        }
                        Statement stloadpm = con.createStatement();
                        ResultSet resloadpm = stloadpm.executeQuery("SELECT name, status, content, sender, room_id, time FROM \"Message\" AS m, \"User\" AS u WHERE u.id = sender AND room_id = "+TargetId+" ORDER BY m.id ASC");
                        jChatContent.setText("");
                        while(resloadpm.next()){
                            S = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(resloadpm.getTimestamp("time"));
                            jChatContent.append("["+S+"]"+resloadpm.getString("name")+"("+resloadpm.getString("status")+"):"+resloadpm.getString("content")+"\n");
                        }
                    }
                    else {
                        jChatContent.setText("");
                        jConsole.setText("Vous êtes exclus de ce channel");
                    }
                }
            }
            
            else if (count>1){
                jConsole.setText("Utilisateur dupliqué. Accès refusé");            
            }
            else {
                jConsole.setText("Combinaison incorrecte. Accès refusé");            
            }
            
        }
        catch(Exception ee )
        {
            ee.printStackTrace();
        }
    }//GEN-LAST:event_jButtonChargerActionPerformed

    private void jButtonEnvoyerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnvoyerActionPerformed
        // TODO add your handling code here:
        try
        {
            int UserId=0;
            String ChatUser = jChatUser.getText();
            String ChatPassword = jChatPassword.getText();
            Class.forName("org.postgresql.Driver");
            Connection con=DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "passroot");
            Statement state = con.createStatement();
            ResultSet result = state.executeQuery("SELECT * FROM \"User\" WHERE name = '" + ChatUser + "' AND password = '" + ChatPassword + "'");            
            int count = 0;
            while(result.next()){
                count = count+1;
                UserId = result.getInt("id");
            }
            if (count==1){        
                Class.forName("org.postgresql.Driver");
                Statement stlog = con.createStatement();
                String MessageContent = jMessage.getText();
                int TargetId = (Integer)jSelector.getValue();
                boolean pm = jRadioPM.isSelected();
                
                String S="";
                if (pm==true){
                    int reslog = stlog.executeUpdate("INSERT INTO \"Message\" (content, sender, recipient, time) VALUES ('"+MessageContent+"', '"+UserId+"', '"+TargetId+"',  now())");            
                    String CorespName= "";
                    String CorespStatus= "";
                    Statement stname = con.createStatement();
                    ResultSet resname = stname.executeQuery("SELECT name, status FROM \"User\" WHERE id= "+TargetId);
                    if (resname.next()){
                        CorespName = resname.getString("name");
                        CorespStatus = resname.getString("status");
                        jConsole.setText("Conversation privée:"+CorespName);
                    }
                    Statement stloadpm = con.createStatement();
                    ResultSet resloadpm = stloadpm.executeQuery("SELECT m.id, name, content, sender, recipient, time FROM \"Message\" AS m, \"User\" as u WHERE sender = u.id AND ((sender = '"+TargetId+"' AND recipient = '"+UserId+"') OR (sender = '"+UserId+"' AND recipient = '"+TargetId+"')) ORDER BY m.id ASC");
                    jChatContent.setText("");
                    while(resloadpm.next()){
                        S = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(resloadpm.getTimestamp("time"));
                        resname = stname.executeQuery("SELECT name, status FROM \"User\" WHERE id= "+resloadpm.getString("sender"));
                        if (resname.next()){
                            CorespName = resname.getString("name");
                            CorespStatus = resname.getString("status");
                    }
                        jChatContent.append("["+S+"]"+CorespName+"("+CorespStatus+"):"+resloadpm.getString("content")+"\n");
                    }
                }
                else {
                    Statement stloadpm2 = con.createStatement();
                    String red = "Rédacteur";
                    String adm = "Admin";
                    ResultSet resloadpm2 = stloadpm2.executeQuery("SELECT * FROM \"Token\" WHERE target = "+UserId+" AND room = "+TargetId+" AND (type = '"+red+"' OR type = '"+adm+"')");
                    if (resloadpm2.next()){
                        int reslog = stlog.executeUpdate("INSERT INTO \"Message\" (content, sender, room_id, time) VALUES ('"+MessageContent+"', '"+UserId+"', '"+TargetId+"',  now())");            
                        String RoomName= "";
                        Statement stname = con.createStatement();
                        ResultSet resname = stname.executeQuery("SELECT name FROM \"Room\" WHERE id= "+TargetId);
                        while (resname.next()){
                            RoomName = resname.getString("name");
                            jConsole.setText("Salon actuel:"+RoomName);
                        }
                        Statement stloadpm = con.createStatement();
                        ResultSet resloadpm = stloadpm.executeQuery("SELECT name, status, content, sender, room_id, time FROM \"Message\" AS m, \"User\" AS u WHERE u.id = sender AND room_id = "+TargetId+" ORDER BY m.id ASC");
                        jChatContent.setText("");
                        while(resloadpm.next()){
                            S = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(resloadpm.getTimestamp("time"));
                            jChatContent.append("["+S+"]"+resloadpm.getString("name")+"("+resloadpm.getString("status")+"):"+resloadpm.getString("content")+"\n");
                        }
                        
                    }
                    else {
                        jConsole.setText("Vous ne pouvez pas écrire dans ce salon");
                    }
                }
            }
            else if (count>1){
                jConsole.setText("Utilisateur dupliqué. Accès refusé");            
            }
            else {
                jConsole.setText("Combinaison incorrecte. Accès refusé");            
            }
            
        }
        catch(Exception ee )
        {
            ee.printStackTrace();
        }
    }//GEN-LAST:event_jButtonEnvoyerActionPerformed

    private void jButtonStatutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStatutActionPerformed
        // TODO add your handling code here:
        try{
                Class.forName("org.postgresql.Driver");
                Connection con=DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "passroot");
                String ChatUser = jChatUser.getText();
                String ChatPassword = jChatPassword.getText();
                String Newstatus = jStatus.getText();
                Statement stlog = con.createStatement();
                int reslog = stlog.executeUpdate("UPDATE \"User\" SET status = '"+Newstatus+"' WHERE name = '" + ChatUser + "' AND password = '" + ChatPassword + "'");            
            // Récupération des contacts
                Statement state3 = con.createStatement();
                ResultSet result3 = state3.executeQuery("SELECT DISTINCT id, name, status FROM \"User\" ORDER BY id");           
                String CorespName;
                String CorespStatus;
                int CorespId;
                jUsers.setText("");
                while(result3.next()){
                    CorespId = result3.getInt("id");
                    CorespName = result3.getString("name");
                    CorespStatus = result3.getString("status");
                    jUsers.append("Contact "+CorespId+": "+CorespName+"["+CorespStatus+"]\n");
                }
        }
            catch(Exception ee )
            {
                ee.printStackTrace();
            }
    }//GEN-LAST:event_jButtonStatutActionPerformed

    private void jButtonRoomCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRoomCreateActionPerformed
        // TODO add your handling code here:
        try
        {
            int UserId=0;
            String ChatUser = jChatUser.getText();
            String ChatPassword = jChatPassword.getText();
            Class.forName("org.postgresql.Driver");
            Connection con=DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "passroot");
            Statement state = con.createStatement();
            ResultSet result = state.executeQuery("SELECT * FROM \"User\" WHERE name = '" + ChatUser + "' AND password = '" + ChatPassword + "'");            
            int count = 0;
            while(result.next()){
                count = count+1;
                UserId = result.getInt("id");
            }
            if (count==1){
                Statement stlog = con.createStatement();
                String RoomName = jRoomName.getText();
                int reslog = stlog.executeUpdate("INSERT INTO \"Room\" (name) VALUES ('"+RoomName+"')");
                Statement stlog2 = con.createStatement();
                ResultSet reslog2 = stlog2.executeQuery("SELECT id FROM \"Room\" WHERE name = '"+RoomName+"'");
                
                int roomid=0;
                while(reslog2.next()){
                    roomid = reslog2.getInt("id");
                }
                Statement stlog3 = con.createStatement();
                int reslog3 = stlog3.executeUpdate("INSERT INTO \"Token\" (type, target, room) VALUES ('Admin', '"+UserId+"', '"+roomid+"')");
                jConsole.setText("salon "+roomid+": "+RoomName+" créé avec succès");

        // Récupération des salons
                Statement state2 = con.createStatement();
                ResultSet result2 = state2.executeQuery("SELECT * FROM \"Room\" AS r, \"Token\" AS t WHERE r.id = t.room AND target = "+UserId);           
                String RoomRights;
                int RoomId;
                jRooms.setText("");
                while(result2.next()){
                    
                    RoomId = result2.getInt("id");
                    RoomName = result2.getString("name");
                    RoomRights = result2.getString("type");
                    count = count+1;
                    jRooms.append("Salon "+RoomId+": "+RoomName+" ["+RoomRights+"]\n");
                }
            }
            
            else if (count>1){
                jConsole.setText("Utilisateur dupliqué. Accès refusé");            
            }
            else {
                jConsole.setText("Combinaison incorrecte. Accès refusé");            
            }
            
        }
        catch(Exception ee )
        {
            ee.printStackTrace();
        }
    }//GEN-LAST:event_jButtonRoomCreateActionPerformed

    private void jButtonTokenCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTokenCreateActionPerformed
        // TODO add your handling code here:
        try
        {
            int UserId=0;
            String ChatUser = jChatUser.getText();
            String ChatPassword = jChatPassword.getText();
            int RoomId = (Integer)jSelectRoom.getValue();
            int TargetId = (Integer)jSelectUser.getValue();

            Class.forName("org.postgresql.Driver");
            Connection con=DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "passroot");
            Statement state = con.createStatement();
            ResultSet result = state.executeQuery("SELECT * FROM \"User\" WHERE name = '" + ChatUser + "' AND password = '" + ChatPassword + "'");            
            int count = 0;
            while(result.next()){
                count = count+1;
                UserId = result.getInt("id");
            }
            if (count==1){
                Statement st2 = con.createStatement();
                ResultSet rs2 = st2.executeQuery("SELECT * FROM \"Token\" WHERE room = '" + RoomId + "' AND target = '" + UserId + "' AND type = 'Admin'");
                if(rs2.next()){
                    boolean guest = jButtonGuest.isSelected();
                    boolean writer = jButtonWriter.isSelected();
                    boolean kicked = jButtonKicked.isSelected();
                    if (writer==true){
                        Statement stchk = con.createStatement();
                        ResultSet reschk = stchk.executeQuery("SELECT * FROM \"Token\" WHERE target = '"+TargetId+"'AND room = '"+RoomId+"'");
                        if (reschk.next()){ 
                            Statement stlog3 = con.createStatement();
                            int reslog3 = stlog3.executeUpdate("UPDATE \"Token\" SET type = 'Rédacteur' WHERE target= '"+TargetId+"' AND room = '"+RoomId+"'");
                            jConsole.setText("Token Rédacteur "+TargetId+":"+RoomId+" créé avec succès");
                            }
                        else {
                            Statement stlog3 = con.createStatement();
                            int reslog3 = stlog3.executeUpdate("INSERT INTO \"Token\" (type, target, room) VALUES ('Rédacteur', '"+TargetId+"', '"+RoomId+"')");
                            jConsole.setText("Token Rédacteur "+TargetId+":"+RoomId+" créé avec succès");
                            }
                        
                    }
                    else if(guest==true){
                        Statement stchk = con.createStatement();
                        ResultSet reschk = stchk.executeQuery("SELECT * FROM \"Token\" WHERE target = '"+TargetId+"' AND room = '"+RoomId+"'");
                        if (reschk.next()){ 
                            Statement stlog3 = con.createStatement();
                            int reslog3 = stlog3.executeUpdate("UPDATE \"Token\" SET type = 'Invité' WHERE target = '"+TargetId+"' AND room = '"+RoomId+"'");
                            jConsole.setText("Token Invité "+TargetId+":"+RoomId+" créé avec succès");
                            }
                        else {
                            Statement stlog3 = con.createStatement();
                            int reslog3 = stlog3.executeUpdate("INSERT INTO \"Token\" (type, target, room) VALUES ('Invité', '"+TargetId+"', '"+RoomId+"')");
                            jConsole.setText("Token Invité "+TargetId+":"+RoomId+" créé avec succès");
                            }
                        
                    }
                    else if(kicked==true){
                    Statement stchk = con.createStatement();
                        ResultSet reschk = stchk.executeQuery("SELECT * FROM \"Token\" WHERE target = '"+TargetId+"' AND room = '"+RoomId+"'");
                        if (reschk.next()){ 
                            Statement stlog3 = con.createStatement();
                            int reslog3 = stlog3.executeUpdate("UPDATE \"Token\" SET type = 'Exclu' WHERE target= '"+TargetId+"' AND room = '"+RoomId+"'");
                            jConsole.setText("Token Exclu "+TargetId+":"+RoomId+" créé avec succès");
                            }
                        else {
                            Statement stlog3 = con.createStatement();
                            int reslog3 = stlog3.executeUpdate("INSERT INTO \"Token\" (type, target, room) VALUES ('Exclu', '"+TargetId+"', '"+RoomId+"')");
                            jConsole.setText("Token Exclu "+TargetId+":"+RoomId+" créé avec succès");
                            }
                        
                    }
                }
                else{
                    jConsole.setText("Vous n'êtes pas administrateur sur ce salon");
                }
            }
            
            else if (count>1){
                jConsole.setText("Utilisateur dupliqué. Accès refusé");            
            }
            else {
                jConsole.setText("Combinaison incorrecte. Accès refusé");            
            }
            
        }
        catch(Exception ee )
        {
            ee.printStackTrace();
        }
    }//GEN-LAST:event_jButtonTokenCreateActionPerformed

    private void jButtonInscriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInscriptionActionPerformed
        // TODO add your handling code here:
        try{
                Class.forName("org.postgresql.Driver");
                Connection con=DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "passroot");
                String ChatUser = jChatUser.getText();
                String ChatPassword = jChatPassword.getText();
                Statement stlog = con.createStatement();
                ResultSet reslog = stlog.executeQuery("SELECT * FROM \"User\" WHERE name = '"+ ChatUser + "'");
                if (reslog.next()){
                    Statement stlog2 = con.createStatement();
                    int reslog2 = stlog2.executeUpdate("INSERT INTO \"User\" (name, password, status) VALUES ('"+ChatUser+"', '"+ChatPassword+"', 'Déconnecté')");
                    jConsole.setText("Inscription du compte "+ChatUser+" échouée: le compte existe déjà");
                }
                else{
                    Statement stlog2 = con.createStatement();
                    int reslog2 = stlog2.executeUpdate("INSERT INTO \"User\" (name, password, status) VALUES ('"+ChatUser+"', '"+ChatPassword+"', 'Déconnecté')");
                    jConsole.setText("Inscription du compte "+ChatUser+" réussie");
                
                }
            }
            catch(Exception ee )
            {
                ee.printStackTrace();
            }
    }//GEN-LAST:event_jButtonInscriptionActionPerformed

    private void jMessageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMessageMouseReleased
        // TODO add your handling code here:
       
    }//GEN-LAST:event_jMessageMouseReleased

    private void jMessageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMessageMousePressed
        // TODO add your handling code here:
         jMessage.setText("");
    }//GEN-LAST:event_jMessageMousePressed

    private void jRadioSalonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioSalonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioSalonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup PMswitchButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFormattedTextField jBddAdress;
    private javax.swing.JFormattedTextField jBddPassword;
    private javax.swing.JFormattedTextField jBddPort;
    private javax.swing.JFormattedTextField jBddUser;
    private javax.swing.JButton jButtonCharger;
    private javax.swing.JButton jButtonConnexionBDD;
    private javax.swing.JButton jButtonEnvoyer;
    private javax.swing.JRadioButton jButtonGuest;
    private javax.swing.JButton jButtonInscription;
    private javax.swing.JRadioButton jButtonKicked;
    private javax.swing.JButton jButtonLogin;
    private javax.swing.JButton jButtonRoomCreate;
    private javax.swing.JButton jButtonStatut;
    private javax.swing.JButton jButtonTokenCreate;
    private javax.swing.JRadioButton jButtonWriter;
    private javax.swing.JTextArea jChatContent;
    private javax.swing.JFormattedTextField jChatPassword;
    private javax.swing.JFormattedTextField jChatUser;
    private javax.swing.JTextArea jConsole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextArea jMessage;
    private javax.swing.JRadioButton jRadioPM;
    private javax.swing.JRadioButton jRadioSalon;
    private javax.swing.JFormattedTextField jRoomName;
    private javax.swing.JTextArea jRooms;
    private javax.swing.JScrollPane jSPaneRoomusers;
    private javax.swing.JScrollPane jSPaneRoomusers1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSelectRoom;
    private javax.swing.JSpinner jSelectUser;
    private javax.swing.JSpinner jSelector;
    private javax.swing.JFormattedTextField jStatus;
    private javax.swing.JTextArea jUsers;
    // End of variables declaration//GEN-END:variables
}
